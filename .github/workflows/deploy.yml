# 프로덕션 배포용 워크플로우 이름
name: Deploy to AWS ECS

# 트리거 조건: main 브랜치에 푸쉬 시 자동 실행
on:
  push:
    branches: [ main ]

# 워크플로우 전체에서 사용할 환경 변수 정의
env:
  # AWS 리전 (서울)
  AWS_REGION: ap-northeast-2
  # ECR 저장소 이름
  ECR_REPOSITORY: chap02-aws-deploy
  # ECS 서비스 이름
  ECS_SERVICE: chap02-service
  # ECS 클러스터 이름
  ECS_CLUSTER: chap02-ecs-cluster-03
  # ECS 태스크 정의 이름
  ECS_TASK_DEFINITION: chap02-task-definition

jobs:
  # 배포 작업 정의
  deploy:
    # GitHub Actions UI에서 표시될 작업 이름
    name: Deploy
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest

    # 배포 작업의 실행 단계들
    steps:
      # 1단계: 소스코드 체크아웃
      - name: Checkout
        # GitHub Actions 서버에서 제공하는 소스코드 체크아웃 액션 사용
        uses: actions/checkout@v3

      # 2단계: Java 17 개발 환경 설정
      - name: Set up JDK 17
        # GitHub Actions 서버에서 제공하는 JDK 설정 액션 사용
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3단계: AWS 자격 증명 설정
      - name: Configure AWS credentials
        # GitHub Actions 서버에서 제공하는 AWS 자격 증명 설정 액션 사용
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # secrets.: GitHub Secrets에 등록된 AWS 자격 증명 정보 가져오기
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # env.: 위에서 설정한 환경 변수로부터 리전 정보 가져오기
          aws-region: ${{ env.AWS_REGION }}

      # 4단계: Amazon ECR에 로그인
      - name: Login to Amazon ECR
        # 이 단계의 출력값을 다른 단계에서 사용하기 위한 ID 설정(일종의 변수화)
        id: login-ecr
        # AWS에서 제공하는 ECR 로그인 액션 사용
        uses: aws-actions/amazon-ecr-login@v1

      # 5단계: Docker 이미지 빌드 및 ECR에 업로드
      - name: Build, tag, and push image to Amazon ECR
        # 이 단계의 출력값을 다른 단계에서 사용하기 위한 ID 설정
        id: build-image
        # 이 단계에서만 사용할 환경 변수 정의
        env:
          # 이전 단계(login-ecr)의 출력값에서 ECR 레지스트리 URL 가져오기
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Git 커밋 해시를 이미지 태그로 사용 (고유성 보장)
          IMAGE_TAG: ${{ github.sha }}
        # 셸 명령어 직접 실행
        run: |
          # gradlew 파일에 실행 권한 부여 (Linux/Unix 시스템 필수)
          # GitHub Actions 서버는 Linux/Unix 시스템이므로 이 명령어를 넣어줘야 실행 권한이 부여된다.
          chmod +x ./gradlew
          # Spring Boot 애플리케이션을 JAR 파일로 빌드
          ./gradlew bootJar
          
          # Docker 이미지를 한 번만 빌드하고 두 개의 태그 적용 (ECR 프리티어 500MB 제한)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECR에 이미지 푸쉬 (커밋 해시 태그) - 실제 이미지 업로드
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # ECR에 이미지 푸쉬 (latest 태그) - 태그만 추가로 푸쉬 (용량 추가 없음)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # 다음 단계에서 사용할 수 있도록 빌드된 이미지 정보를 출력
          # 이 단계의 출력값을 다른 단계에서 사용하기 위한 ID 설정 (GITHUB_OUTPUT가 변수화됨)
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 6단계: 태스크 정의 파일에서 컨테이너 이미지 정보를 새 이미지로 업데이트
      - name: Fill in the new image ID in the Amazon ECS task definition
        # 이 단계의 출력값을 다음 단계에서 사용하기 위한 ID 설정
        id: task-def
        # AWS에서 제공하는 태스크 정의 렌더링 액션 사용
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # 프로젝트 루트의 태스크 정의 JSON 파일 경로
          task-definition: task-definition.json
          # 업데이트할 컨테이너의 이름 (본인의 태스크 정의 파일 내 containerDefinitions에서 지정한 이름)
          container-name: chap02-container
          # 새로 빌드된 이미지 URL (이전 단계의 출력값 사용)
          image: ${{ steps.build-image.outputs.image }}
          # (보안!) GitHub Secrets에서 정의한 애플리케이션 레벨의 환경변수들을 동적으로 주입
          environment-variables: |
            AWS_ACCESS_KEY_ID=${{ secrets.APP_AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.APP_AWS_SECRET_ACCESS_KEY }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}

      # 7단계: 업데이트된 태스크 정의로 ECS 서비스 배포 실행
      - name: Deploy Amazon ECS task definition
        # AWS에서 제공하는 ECS 배포 액션 사용
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # 이전 단계에서 업데이트된 태스크 정의 사용
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          # 업데이트할 ECS 서비스 이름
          service: ${{ env.ECS_SERVICE }}
          # 대상 ECS 클러스터 이름
          cluster: ${{ env.ECS_CLUSTER }}
            # 배포가 안정화될 때까지 기다리기 (true: 새 태스크가 완전히 실행되고 헬스체크 통과까지 대기)
            # 참고로 이 옵션을 사용하면 배포가 완료될 때까지 워크플로우가 대기하게 되며
            # CI/CD에서는 보통 false를 사용해 배포가 완료되면 다음 단계로 넘어가도록 설정한다.
          wait-for-service-stability: true