########################################################################################
# 1단계: Gradle 빌드 환경 (멀티플랫폼 지원)
########################################################################################
# 멀티플랫폼 지원을 위한 베이스 이미지 선택
FROM eclipse-temurin:17-jdk-alpine AS builder

# 작업 디렉토리 설정
WORKDIR /app

# Gradle Wrapper와 설정 파일 복사
COPY gradlew .
COPY gradle gradle
COPY build.gradle .
COPY settings.gradle .

# 소스 코드 복사
COPY src src

# 애플리케이션 빌드 (bootJar 사용)
RUN ./gradlew bootJar

########################################################################################
# 2단계: 실행 환경 (최적화된 런타임)
########################################################################################
FROM eclipse-temurin:17-jre-alpine

# 작업 디렉토리 설정
WORKDIR /app

# 빌드된 JAR 파일 복사
COPY --from=builder /app/build/libs/*.jar app.jar

########################################################################################
# 이미지 파일 처리 옵션 (아래 중 하나를 선택하여 사용)
########################################################################################

# 옵션 1번 : 로컬 static 파일 포함 (로컬 테스트 및 S3 백업용)
#  - 더미 데이터의 이미지 파일들을 컨테이너에 포함
#  - S3 연결 실패 시에도 기본 이미지 제공 가능
#  - 컨테이너 크기가 약간 증가 (21개 이미지 파일, 약 3MB)
#  - 실습 환경에서 S3 설정 없이도 이미지 확인 가능
COPY --from=builder /app/src/main/resources/static /app/static

# 옵션 2번 : 완전히 S3 의존 (프로덕션 권장)
#  - 컨테이너에 이미지 파일 포함하지 않음
#  - 모든 이미지를 S3에서 직접 로드
#  - 컨테이너 크기 최소화
# - S3 설정이 필수 (AWS 환경에서만 동작)
# COPY --from=builder /app/src/main/resources/static /app/static

# 참고: 옵션 2를 사용하려면 위의 COPY 라인을 주석 처리하고 이 주석을 해제하세요
# 현재는 옵션 1이 활성화되어 있습니다

########################################################################################
# 컨테이너 실행 설정
########################################################################################

# 포트 노출
EXPOSE 8080

# 애플리케이션 실행
ENTRYPOINT ["java", "-jar", "app.jar"] 